Engress
--------------------
sudo tc qdisc del dev lo root //clear any previous configuration
sudo tc qdisc add dev lo root handle 1: prio //start new queue disc but no classes yet

sudo tc filter replace dev lo parent 1: protocol ip prio 1 u32 match ip dport 41843 0xffff flowid 1:1
sudo tc filter add dev lo parent 1: protocol ip prio 1 u32 match ip dport 6333 0xffff flowid 1:2
sudo tc filter add dev lo parent 1: protocol ip prio 1 u32 match ip dport 6334 0xffff flowid 1:3

sudo tc qdisc add dev lo parent 1:1 handle 30: netem delay 146ms 
sudo tc qdisc add dev lo parent 1:2 handle 20: netem delay 275ms 
sudo tc qdisc add dev lo parent 1:3 handle 10: netem delay 258ms





sudo tc qdisc del dev lo root
sudo tc qdisc add dev lo root handle 1: prio

sudo tc filter replace dev lo parent 1: protocol ip prio 1 u32 match ip dport 41843 0xffff flowid 1:1

sudo tc qdisc add dev lo parent 1:1 handle 30: netem delay 146ms 


Ingress 
------------------

# This a solution for inducing latency on ingress traffic to a specific port
# note: ianae, but many hours of sleuthing and experimenting got me to this answer
# Adapted from https://wiki.gentoo.org/wiki/Traffic_shaping
# Note technically TC can only induce latency on egress traffic so we add an intermediate device which allows
#  us to first identify the traffic we want to affect and then send it to a queue to do <stuff>
# eth0 is the external interface receiving the traffic we want to filter, 4222 is the port we want to add latency to.
# Those are the only values that you should need to change, if necessary.

# Add a TC ingress queue to your external interface, by default you shouldn't have one
sudo tc qdisc add dev eth0 handle ffff: ingress
# make sure ifb module is loaded and bring up the interface (IFB = Intermediate Functional Block device)
sudo modprobe ifb
sudo ifconfig ifb0 up
# redirect all traffic to the ifb so that we can later filter on the traffic that leaves that interface
sudo tc filter add dev eth0 parent ffff: protocol all u32 match u32 0 0 action mirred egress redirect dev ifb0
# build up our egress queues and filters
# we need a root, this one uses priority queues which defaults to not modifying any traffic
sudo tc qdisc add dev ifb0 root handle 1: prio
# add a special queue that induces latency
sudo tc qdisc add dev ifb0 parent 1:1 handle 2: netem delay 100ms 50ms distribution normal
# if we find a packet that matches our destination port, send it to the above queue
sudo tc filter add dev ifb0 protocol ip parent 1:0 prio 1 u32 match ip dport 4222 0xffff flowid 2:1



Filter bandwidth
---------------------
sudo tc qdisc replace dev lo parent 1:1 handle 2: tbf rate 100Mbit burst 1500 latency 10ms
